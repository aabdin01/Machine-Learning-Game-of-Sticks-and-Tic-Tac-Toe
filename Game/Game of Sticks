import json; import random; import time; import copy

'''
    Copyright Code Engine Kawin Pechetratanapanit and Abdulahi Abdinasir
    Co-Developed Mariel A
    
    Changelogs 2/3/2015:
    -- Training algorithm is now working properly
    -- Waiting time is significantly reduced
    -- First public access
    -- Fixed: New training engine. The previous version was wrong.

    Changelogs 20/2/2015:
    -- Each player has equaled chance to play first
    -- Code clean up and added more comments
    -- Imporved UI
    
    Changelogs 19/2/2015:
    -- Lists construction in training algorithm is replaced with list comprehension (up to 1.2X faster).
    -- Code clean-up with more advanced syntax
    -- Added: Player can now choose whether to play with trained AI or random
    -- Simplified the way the computer chooses how many sticks to take.
    -- Bug fixes
    
    Changelogs 18/2/2015:
    -- The Game's framework has been integrated with decision making algorithm.
    -- Decision making algorithm has been reworked to be more efficient.
    -- AI training algorithm v2.0 is now up to 1.5X faster than the previous version.
    -- Original AI training algorithm was created by Adulahi Abdinur, and improved by Kawin Pechetratanpanit

    Changelogs 13/2/2015:
    -- Added: 2 Players Human vs Human game option
    -- Bug fixes, and more comments are added

    Changelogs 07/2/2015:
    -- Game's framework has been remodeled to follow the object-oriented design.
    -- Simplify framework design
    -- Added: Computer vs Human interface
'''

class Game:
    
    playerTurn = True; thisAITurn = bool(); playerFirstTurn = playerTurn;
    totalSticks = int(); option = int(); intel = list()

    def flipACoin(self):
        
        print("\nFliping a coin... --> ", end = "")
##        Game.playerTurn = True if random.random() >= 0.5 else False
        notice1 = "Player may go first"
        notice2 = "Player1 may go first"
        if Game.option == 0:
            print(notice1 if Game.playerTurn else "AI go first")
        else:
            print(notice2 if Game.playerTurn else "Player2 may go first")
        print()

    def initializeGame(self):

        Game.option = ({1: 0, 2: 1}[eval(input("Do you want to play against (1) computer or (2) a friend?: "))])
        print({0: "Playing against the computer", 1: "Playing against a friend"}[Game.option])
        
        Game.totalSticks = eval(input("How many sticks are on the table initially? (10 - 100): "))
        while Game.totalSticks < 10 or Game.totalSticks > 100:
            Game.totalSticks = eval(input("Please enter a valid number of sticks (10 - 100): "))
        
        if Game.option == 0 and input("Do you want to play against trained AI? (Y | N): ").upper()[0] == "Y":
            print("Training AI...", end=" ")
            Game.trainAI(self)
            print("Training Completed.")

        print(Game.intel)
   


    def trainAI(self):
        ## This computer is now playing as a player
        Game.intel = [[0,0,0] for _ in range(Game.totalSticks)]
        ballList = [[1,2,3] for _ in range(Game.totalSticks)]
        
        level = 5000 * Game.totalSticks
        
        for i in range(level):
            countList = [len(ballList[k]) for k in range(Game.totalSticks)]
            thisAITurn = True if Game.playerFirstTurn else False
            sticksLeft = Game.totalSticks
            
            while sticksLeft > 0:
                take = random.randint(0,len(ballList[sticksLeft - 1]) - 1)
                take = ballList[sticksLeft - 1][take]
                if self.thisAITurn == True:
                    ballList[sticksLeft - 1].append(take)
                sticksLeft -= take

                if self.thisAITurn == True and sticksLeft <= 0:
                    for n in range(Game.totalSticks):
                        if len(ballList[n]) > countList[n]:
                            ballList[n].pop(-1)

                self.thisAITurn = not self.thisAITurn
            
            if((i + 1)/level * 100 % 10 == 0): 
                print("{:.0f}%".format(i/level * 100), end=" ")
                
        for i in range(Game.totalSticks):
            Game.intel[i][0] += ballList[i].count(1)
            Game.intel[i][1] += ballList[i].count(2)
            Game.intel[i][2] += ballList[i].count(3)
            
                            

    def game(self):

        sticksLeft = Game.totalSticks
        while sticksLeft > 0:
            take = 0

            while (take < 1 or take > 3) and Game.playerTurn:
                take = eval(input("Player 1: How many sticks do you want to take? (1 - 3): "))
            if Game.playerTurn:
                sticksLeft -= take
                print("Player 1: Takes", take, "sticks. There are", sticksLeft, "sticks left.")

            if not Game.playerTurn:
                
                take = random.randint(1,3)
                if len(Game.intel) > 0 and Game.option == 0:
                    currentList = Game.intel[sticksLeft - 1]
                    take = currentList.index(sorted(currentList, reverse = True)[0]) + 1
                if Game.option == 1: 
                    take = eval(input("Player 2: How many sticks do you want to take? (1 - 3): "))
                    
                sticksLeft -= take
                notice1 = "      AI: Takes {} sticks. There are {} sticks left.".format(take, sticksLeft)
                notice2 = "Player 2: Takes {} sticks. There are {} sticks left".format(take, sticksLeft)
                print(notice1 if Game.option == 0 else notice2)

            Game.playerTurn = not Game.playerTurn if sticksLeft > 0 else Game.playerTurn

        if Game.option == 0:
            print({True: "You lose", False: "You win"}[Game.playerTurn])
        if Game.option == 1:
            print("Player 1 you lose" if Game.playerTurn else "Player 2 you lose")


def main():
    thisGame = Game()
    Game.initializeGame(thisGame)
    Game.flipACoin(thisGame)
    Game.game(thisGame)
    
main()
